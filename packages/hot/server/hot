#!/usr/bin/env node

const { WebSocketServer } = require("ws");
const { watch } = require("chokidar");
const { resolve, relative, join } = require("path");
const { readFile } = require("fs");
const ngrok = require("ngrok");
const chalk = require("chalk");

const port = process.env.HOT_PORT || 8080;

const initServer = () => {
  return new WebSocketServer({
    port,
  });
};

const getPath = (name) => {
  if (!name) {
    console.error(chalk.red("No watch path provided."));
    process.exit(1);
  }

  return resolve(process.cwd(), name);
};

const emitFile = (socket, path) => {
  readFile(path, (error, file) => {
    if (error) throw error;

    const relativePath = relative(process.cwd(), path);

    console.info(chalk.yellow(`Reloading ${relativePath}...`));

    socket.send(`change:${relativePath}:${file}`);
  });
};

const watchPath = (socket, name) => {
  const watcher = watch(getPath(name));

  watcher.on("change", async (path) => {
    emitFile(socket, path);
  });

  watcher.on("ready", () => {
    Object.entries(watcher.getWatched()).forEach(([dir, paths]) =>
      paths.forEach((path) => emitFile(socket, join(dir, path)))
    );
  });
};

const initProxy = async () => {
  if (process.env.DISABLE_PROXY !== "true") {
    const proxy = await ngrok.connect(port);

    console.info(chalk.cyan(`\nAlternatively, run the following:\n`));
    console.info(
      chalk.bold(chalk.magenta(`hot ${proxy.replace(/^http(s)?/, "ws")}\n`))
    );
  }
};

(async () => {
  const args = process.argv.slice(2);
  const path = args[0];

  const server = initServer();

  server.on("connection", (socket) => {
    console.info(chalk.green("Client connected."));

    watchPath(socket, path);
  });

  console.info(chalk.white(`\nHot server booted.`));
  console.info(chalk.gray(`Watching \`${path}\`...`));

  console.info(chalk.cyan(`\nRun the following on your remote device:\n`));
  console.info(chalk.blue(`hot ws://your_public_ip:${port}\n`));

  initProxy();
})();
