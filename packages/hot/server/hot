#!/usr/bin/env node

const { WebSocketServer, WebSocket } = require("ws");
const { watch } = require("chokidar");
const { resolve, relative, join } = require("path");
const { readFile, lstatSync } = require("fs");
const ngrok = require("ngrok");
const chalk = require("chalk");

const port = process.env.HOT_PORT || 8080;

const initServer = () => {
  return new WebSocketServer({
    port,
  });
};

const getPath = (name) => {
  if (!name) {
    console.error(chalk.bgRedBright("No watch path provided."));
    process.exit(1);
  }

  return resolve(process.cwd(), name);
};

const encode64 = (string) => {
  return Buffer.from(string).toString("base64");
};

const broadcastFile = (server, path) => {
  readFile(path, (error, file) => {
    if (error) throw error;

    const relativePath = relative(process.cwd(), path);

    console.info(chalk.yellow(`Reloading ${relativePath}...`));

    server.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(`change:${encode64(relativePath)}:${encode64(file)}`);
      }
    });
  });
};

let watcher = null;
let hasEmittedAll = false;

const emitAll = (server) => {
  hasEmittedAll = true;

  Object.entries(watcher.getWatched()).forEach(([dir, paths]) => {
    return paths.forEach((p) => {
      const path = join(dir, p);

      if (lstatSync(path).isDirectory()) return;

      return broadcastFile(server, path);
    });
  });
};

let isWatcherReady = false;

const watchPath = (server, name) => {
  if (watcher) return;

  watcher = watch(name, { ignored: /(node_modules|\.git)/ });

  watcher.on("change", async (path) => {
    broadcastFile(server, path);
  });

  watcher.on("ready", () => {
    isWatcherReady = true;
    hasEmittedAll || emitAll(server);
  });
};

const initProxy = async () => {
  if (process.env.DISABLE_PROXY !== "true") {
    const proxy = await ngrok.connect(port);

    console.info(chalk.cyan(`\nAlternatively, run the following:\n`));
    console.info(
      chalk.bold(chalk.magenta(`hot ${proxy.replace(/^http(s)?/, "ws")}\n`))
    );
  }
};

(async () => {
  const args = process.argv.slice(2);
  const path = args[0];
  const name = getPath(path);

  const server = initServer();

  server.on("connection", () => {
    console.info(chalk.green("Client connected."));

    watchPath(server, name);
    isWatcherReady && emitAll(server);
  });

  console.info(chalk.white(`\nHot server booted!`));
  console.info(chalk.gray(`Watching \`${path}\`...`));

  console.info(chalk.cyan(`\nRun the following on your remote device:\n`));
  console.info(chalk.blue(`hot ws://your_public_ip:${port}\n`));

  initProxy();
})();
